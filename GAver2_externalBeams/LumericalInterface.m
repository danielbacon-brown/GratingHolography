classdef LumericalInterface
    
    properties
        dimensions;
        cells;
        SU8matrix; %boolean, whether to have metal lattice in a matrix
        repeatUnits;
        minMeasWL;
        maxMeasWL;
    end
    
    methods
        
        function L = LumericalInterface(options)
            L.dimensions = options.dimensions;
            L.cells = options.cells;
            L.SU8matrix = options.SU8matrix;
            L.repeatUnits = options.fdtd.repeatUnits;
            L.minMeasWL = options.minMeasWL;
            L.maxMeasWL = options.maxMeasWL;
        end
        
        function writeLumericalRunFileSquare( options, structureSU8)
            %This writes the Lumerical Script that imports the structure, runs the
            %simulation, and exports the data.
            
            
            setXYstr = setXYdimensionStr();
            setWLlimStr = setWavelengthLimStr();
            
            %Create repeat structure
            structureSU8 = repmat(structureSU8,[1,1,options.fdtd.repeatUnits]);
            
            
            %SETUP
            sprintf('newproject; \n');
            
            structureThickness = options.fdtd.shrinkFactor*options.fdtd.repeatUnits*options.dimensions(3);
            
            %Mesh
            setupStr = [ setupStr, '\n' ...
                , 'addfdtd; \n' ...
                , setXYstr ...
                , sprintf('set("z", 0); \n') ...
                , sprintf('set("simulation time",%i); \n', options.fdtd.simulationTime*1e-15) ...
                , sprintf('set("z span", %e ); \n', (structureThickness*2+2)*1e-6) ...
                , sprintf('set("mesh type","auto non-uniform"); \n') ...
                , sprintf('set("mesh accuracy",%i); \n',options.fdtd.meshAccuracy) ...
                , sprintf('set("use early shutoff",0); \n') ...
                , sprintf('set("x min bc","periodic"); \n') ...
                , sprintf('set("y min bc","periodic"); \n') ...
                ];
            
            %Plane Source
            setupStr = [ setupStr, '\n' ...
                'addplane; \n' ...
                , sprintf('set("name","source1"); \n') ...
                , setXYstr ...
                , sprintf('set("z", %e); \n', (-structureThickness/2-0.3)*1e-6) ...
                , setWLlimStr ...
                ];
            
            %Plane Source for Circular Polarization
            setupStr = [ setupStr, '\n' ...
                sprintf('copy(0,0,0); \n') ...
                , sprintf('set("name","source2"); \n') ...
                , sprintf('set("polarization angle",90); \n') ...
                , sprintf('set("phase",90); \n') ...
                ];
            
            %Transmission detector
            setupStr = [ setupStr, '\n' ...
                sprintf('addprofile; \n') ...
                , sprintf('set("name","transmission"); \n') ...
                , setXYstr ...
                , sprintf('set("z", %e); \n', (structureThickness/2+0.5)*1e-6) ... %transmission detector is 2 microns above structure
                , sprintf('set("override global monitor settings",1); \n') ...
                , sprintf('set("use source limits",0); \n') ...
                , setWLlimStr ...
                , sprintf('set("frequency points",%i); \n',options.fdtd.numMeasWL) ...
                , sprintf('set("use linear wavelength spacing",0); \n') ...
                ];
            
            %Reflection detector
            setupStr = [ setupStr, '\n' ...
                sprintf('addprofile; \n') ...
                , sprintf('set("name","reflection"); \n') ...
                , setXYstr ...
                , sprintf('set("z", %e); \n', (-structureThickness/2-0.5)*1e-6) ... %reflection detector is 2 microns below structure
                , sprintf('set("override global monitor settings",1); \n') ...
                , sprintf('set("use source limits",0); \n') ...
                , setWLlimStr ...
                , sprintf('set("frequency points",%i); \n', options.fdtd.numMeasWL) ...
                , sprintf('set("use linear wavelength spacing",0); \n') ...
                ];
            
 
            if L.addSU8matrix
                setupStr = [ setupStr, '\n' ...
                    , sprintf('addrect; \n')
                    , sprintf('set("name","base"); \n') ...
                    , setXYstr ...
                    , sprintf('set("z span",%e); \n', structureThickness*1e-6) ];
                
            end
            
            
            if options.fdtd.addCubesDirectly
                
                setupStr = [ setupStr, '\n' ...
                    sprintf('redrawoff; \n') ... %prevents redrawing of elements during the creation of the cubes
                    ];
                
                
                dx = options.dimensions(1)/options.cells(1)*1e-6;
                dy = options.dimensions(2)/options.cells(2)*1e-6;
                dz = options.dimensions(3)*options.fdtd.shrinkFactor/options.cells(3)*1e-6;
                %initial rect that will be copied
                setupStr = [setupStr, sprintf('addrect; set("name","base"); set("x span",%e); set("y span",%e); set("z span",%e); \n', ...
                    dx, dy, dz) ];
                
                switch L.metal
                    case 'gold'
                        setupStr = [setupStr, sprintf('set("material","Au (Gold) - CRC"); \n') ];
                    case 'silver'
                        setupStr = [setupStr, sprintf('set("material","Ag (Silver) - CRC"); \n') ];
                end
                
                setupStr = [setupStr, sprintf('set("x",%e); set("y",%e); set("z",%e); \n', -options.dimensions(1)/2*1e-6 - dx/2, -options.dimensions(2)/2*1e-6 - dy/2, -structureThickness/2*1e-6 - dz/2)];
                for i = 1:options.cells(1)
                    for j = 1:options.cells(2)
                        for k = 1:options.cells(3)*options.fdtd.repeatUnits
                            if ~structureSU8(i,j,k)
                                setupStr = [setupStr, sprintf('select("base"); copy(%e,%e,%e); set("name","%s"); \n',i*dx,j*dy,k*dz, 'C')];
                            end
                        end
                    end
                end
                setupStr = [setupStr, sprintf('select("base"); delete; \n')];
                
                
            else
                dimLum = L.dimensions;
                dimLum(3) = options.fdtd.shrinkFactor*options.fdtd.repeatUnits*options.dimensions(3);
                n_SU8 = 1.6;
                k_SU8 = 0;
                n_Ag = 0.10858;  %1.33um  Babar and Weaver
                k_g = 9.6590;    % "
                outputLumericalFile( structureSU8, dimLum, n_SU8,k_SU8,n_Ag,k_Ag, 1, [options.dir,options.LumNKfile] );
                
                sprintf('addimport; \n');
                sprintf('importnk("%s","%s",%e,%e,%e,%i); \n',[options.dir,options.currentNKfile],...
                    'microns',0,0,0*1e-6,0);
                
                %sprintf('for (n=2:%i){ \n',options.Nstructrepeat);
                %    sprintf('copy(%e,%e,%e); \n',0,0,param.Z_T_shrunk*1e-6);
                %sprintf('} \n');
            end
            
            %Save and run
            setupStr = [ setupStr, '\n' ...
                sprintf('save("%s"); \n',[options.dir,options.currentLumSave]) ...
                , sprintf('runparallel; \n') ...
                ];
            %Record LCP polarization data
            setupStr = [ setupStr, '\n' ...
                sprintf('transmission_left = transmission("transmission"); \n') ...
                , sprintf('reflection_left = transmission("reflection"); \n') ...
                ];
            %Change to RCP polarization
            setupStr = [ setupStr, '\n' ...
                sprintf('switchtolayout; \n') ...
                , sprintf('select("source2"); \n') ...
                , sprintf('set("phase",-90); \n') ...  %Set to right-handed polarization
                ];
            %Save and run again
            setupStr = [ setupStr, '\n' ...
                sprintf('save("%s"); \n',[options.dir,options.currentLumSave]) ...
                , sprintf('runparallel; \n') ...
                ];
            %Record RCP polarization data
            setupStr = [ setupStr, '\n' ...
                sprintf('transmission_right = transmission("transmission"); \n') ...
                , sprintf('reflection_right = transmission("reflection"); \n') ...
                ];
            
            setupStr = [ setupStr, '\n' ...
                sprintf('matlabsavelegacy("%s",transmission_right,reflection_right,transmission_left,reflection_left); \n',[options.dir,options.currentLumResultsFile]) ...
                ];
            
            if options.fdtd.end
                setupStr = [setupStr, sprintf('exit; \n')];
            end
            
            %Open file
            runout = fopen([options.dir,options.LumRunScript], 'w');
            fprintf(runout, setupStr);
            fclose(runout);
            
            
        end
        
        
        function setXYstr = setXYdimensionStr(L)
            setXYstr = [ ...
                sprintf('set("x",%e); \n', 0) ...
                , sprintf('set("y",%e); \n', 0) ...
                , sprintf('set("x span",%e); \n', L.dimensions(1)*1e-6) ...
                , sprintf('set("y span",%e); \n', L.dimensions(1)*1e-6) ...
                ];
        end
        
        function setWLstr = setWavelengthLimStr(L)
            setWLstr = [ ...
                sprintf('set("minimum wavelength",%e); \n', L.minMeasWL) ...
                , sprintf('set("maximum wavelength",%e); \n', L.maxMeasWL) ...
                ];
        end
        
        
        
    end
    
    
end
